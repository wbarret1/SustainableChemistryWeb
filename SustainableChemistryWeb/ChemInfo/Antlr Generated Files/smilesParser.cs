//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\wbarr\Source\Repos\SustainableChemistryWeb\SustainableChemistryWeb\ChemInfo\smiles.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class smilesParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, T__84=85, T__85=86, T__86=87, 
		T__87=88, T__88=89, T__89=90, T__90=91, T__91=92, T__92=93, T__93=94, 
		T__94=95, T__95=96, T__96=97, T__97=98, T__98=99, T__99=100, T__100=101, 
		T__101=102, T__102=103, T__103=104, T__104=105, T__105=106, T__106=107, 
		T__107=108, T__108=109, T__109=110, T__110=111, T__111=112, T__112=113, 
		T__113=114, T__114=115, T__115=116, T__116=117, T__117=118, T__118=119, 
		T__119=120, T__120=121, T__121=122, T__122=123, T__123=124, T__124=125, 
		T__125=126, T__126=127, T__127=128, T__128=129, T__129=130, T__130=131, 
		T__131=132, T__132=133, T__133=134, T__134=135, T__135=136, T__136=137, 
		T__137=138, T__138=139, T__139=140, T__140=141, T__141=142, T__142=143, 
		T__143=144, T__144=145, T__145=146, T__146=147, T__147=148, T__148=149, 
		T__149=150, T__150=151, T__151=152, T__152=153, T__153=154, T__154=155, 
		T__155=156, ORGANIC_SYMBOL=157, AROMATIC_SYMBOL=158, WILDCARD=159, DIGIT=160;
	public const int
		RULE_smiles = 0, RULE_chain = 1, RULE_branched_atom = 2, RULE_branch = 3, 
		RULE_ringbond = 4, RULE_bond = 5, RULE_dot = 6, RULE_atom = 7, RULE_symbol = 8, 
		RULE_organic = 9, RULE_aromatic = 10, RULE_halogen = 11, RULE_chiral = 12, 
		RULE_charge = 13, RULE_hcount = 14, RULE_atomclass = 15, RULE_isotope = 16, 
		RULE_element = 17;
	public static readonly string[] ruleNames = {
		"smiles", "chain", "branched_atom", "branch", "ringbond", "bond", "dot", 
		"atom", "symbol", "organic", "aromatic", "halogen", "chiral", "charge", 
		"hcount", "atomclass", "isotope", "element"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'%'", "'-'", "'='", "'#'", "'$'", "':'", "'\\'", 
		"'/'", "'.'", "'['", "']'", "'B'", "'C'", "'N'", "'O'", "'S'", "'P'", 
		"'F'", "'Cl'", "'Br'", "'I'", "'b'", "'c'", "'n'", "'o'", "'p'", "'s'", 
		"'se'", "'as'", "'X'", "'@'", "'@@'", "'@TH1'", "'@TH2'", "'@AL1'", "'@AL2'", 
		"'@SP1'", "'@SP2'", "'@SP3'", "'@TB1'", "'@TB2'", "'@TB3'", "'@TB30'", 
		"'@OH1'", "'@OH2'", "'@OH3'", "'@OH30'", "'+'", "'--'", "'++'", "'H'", 
		"'He'", "'Li'", "'Be'", "'Ne'", "'Na'", "'Mg'", "'Al'", "'Si'", "'Ar'", 
		"'K'", "'Ca'", "'Sc'", "'Ti'", "'V'", "'Cr'", "'Mn'", "'Fe'", "'Co'", 
		"'Ni'", "'Cu'", "'Zn'", "'Ga'", "'Ge'", "'As'", "'Se'", "'Kr'", "'Rb'", 
		"'Sr'", "'Y'", "'Zr'", "'Nb'", "'Mo'", "'Tc'", "'Ru'", "'Rh'", "'Pd'", 
		"'Ag'", "'Cd'", "'In'", "'Sn'", "'Sb'", "'Te'", "'Xe'", "'Cs'", "'Ba'", 
		"'Hf'", "'Ta'", "'W'", "'Re'", "'Os'", "'Ir'", "'Pt'", "'Au'", "'Hg'", 
		"'Tl'", "'Pb'", "'Bi'", "'Po'", "'At'", "'Rn'", "'Fr'", "'Ra'", "'Rf'", 
		"'Db'", "'Sg'", "'Bh'", "'Hs'", "'Mt'", "'Ds'", "'Rg'", "'Cn'", "'Fl'", 
		"'Lv'", "'La'", "'Ce'", "'Pr'", "'Nd'", "'Pm'", "'Sm'", "'Eu'", "'Gd'", 
		"'Tb'", "'Dy'", "'Ho'", "'Er'", "'Tm'", "'Yb'", "'Lu'", "'Ac'", "'Th'", 
		"'Pa'", "'U'", "'Np'", "'Pu'", "'Am'", "'Cm'", "'Bk'", "'Cf'", "'Es'", 
		"'Fm'", "'Md'", "'No'", "'Lr'", null, null, "'*'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "ORGANIC_SYMBOL", "AROMATIC_SYMBOL", "WILDCARD", "DIGIT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "smiles.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static smilesParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public smilesParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public smilesParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SmilesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(smilesParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChainContext chain() {
			return GetRuleContext<ChainContext>(0);
		}
		public SmilesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_smiles; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.EnterSmiles(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.ExitSmiles(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsmilesVisitor<TResult> typedVisitor = visitor as IsmilesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmiles(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SmilesContext smiles() {
		SmilesContext _localctx = new SmilesContext(Context, State);
		EnterRule(_localctx, 0, RULE_smiles);
		int _la;
		try {
			State = 47;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 37;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__11) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30))) != 0)) {
					{
					State = 36;
					chain(0);
					}
				}

				State = 39;
				Match(Eof);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 40;
					Match(T__0);
					State = 41;
					chain(0);
					State = 42;
					Match(T__1);
					}
				}

				State = 46;
				Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Branched_atomContext branched_atom() {
			return GetRuleContext<Branched_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChainContext chain() {
			return GetRuleContext<ChainContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BondContext bond() {
			return GetRuleContext<BondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotContext dot() {
			return GetRuleContext<DotContext>(0);
		}
		public ChainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chain; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.EnterChain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.ExitChain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsmilesVisitor<TResult> typedVisitor = visitor as IsmilesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChainContext chain() {
		return chain(0);
	}

	private ChainContext chain(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ChainContext _localctx = new ChainContext(Context, _parentState);
		ChainContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_chain, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 50;
			branched_atom();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 64;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 62;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						_localctx = new ChainContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_chain);
						State = 52;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 53;
						branched_atom();
						}
						break;
					case 2:
						{
						_localctx = new ChainContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_chain);
						State = 54;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 55;
						bond();
						State = 56;
						branched_atom();
						}
						break;
					case 3:
						{
						_localctx = new ChainContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_chain);
						State = 58;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 59;
						dot();
						State = 60;
						branched_atom();
						}
						break;
					}
					} 
				}
				State = 66;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Branched_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RingbondContext[] ringbond() {
			return GetRuleContexts<RingbondContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RingbondContext ringbond(int i) {
			return GetRuleContext<RingbondContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BranchContext[] branch() {
			return GetRuleContexts<BranchContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BranchContext branch(int i) {
			return GetRuleContext<BranchContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BondContext[] bond() {
			return GetRuleContexts<BondContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BondContext bond(int i) {
			return GetRuleContext<BondContext>(i);
		}
		public Branched_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_branched_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.EnterBranched_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.ExitBranched_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsmilesVisitor<TResult> typedVisitor = visitor as IsmilesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBranched_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Branched_atomContext branched_atom() {
		Branched_atomContext _localctx = new Branched_atomContext(Context, State);
		EnterRule(_localctx, 4, RULE_branched_atom);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			atom();
			State = 74;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 69;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9))) != 0)) {
						{
						State = 68;
						bond();
						}
					}

					State = 71;
					ringbond();
					}
					} 
				}
				State = 76;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			State = 80;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 77;
					branch();
					}
					} 
				}
				State = 82;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BranchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChainContext chain() {
			return GetRuleContext<ChainContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BondContext bond() {
			return GetRuleContext<BondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotContext dot() {
			return GetRuleContext<DotContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BranchContext branch() {
			return GetRuleContext<BranchContext>(0);
		}
		public BranchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.EnterBranch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.ExitBranch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsmilesVisitor<TResult> typedVisitor = visitor as IsmilesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBranch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BranchContext branch() {
		BranchContext _localctx = new BranchContext(Context, State);
		EnterRule(_localctx, 6, RULE_branch);
		try {
			State = 101;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 83;
				Match(T__0);
				State = 84;
				chain(0);
				State = 85;
				Match(T__1);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 87;
				Match(T__0);
				State = 88;
				bond();
				State = 89;
				chain(0);
				State = 90;
				Match(T__1);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 92;
				Match(T__0);
				State = 93;
				dot();
				State = 94;
				chain(0);
				State = 95;
				Match(T__1);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 97;
				Match(T__0);
				State = 98;
				branch();
				State = 99;
				Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RingbondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(smilesParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(smilesParser.DIGIT, i);
		}
		public RingbondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ringbond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.EnterRingbond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.ExitRingbond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsmilesVisitor<TResult> typedVisitor = visitor as IsmilesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRingbond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RingbondContext ringbond() {
		RingbondContext _localctx = new RingbondContext(Context, State);
		EnterRule(_localctx, 8, RULE_ringbond);
		try {
			State = 107;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 103;
				Match(T__2);
				State = 104;
				Match(DIGIT);
				State = 105;
				Match(DIGIT);
				}
				}
				break;
			case DIGIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 106;
				Match(DIGIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BondContext : ParserRuleContext {
		public BondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.EnterBond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.ExitBond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsmilesVisitor<TResult> typedVisitor = visitor as IsmilesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BondContext bond() {
		BondContext _localctx = new BondContext(Context, State);
		EnterRule(_localctx, 10, RULE_bond);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DotContext : ParserRuleContext {
		public DotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.EnterDot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.ExitDot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsmilesVisitor<TResult> typedVisitor = visitor as IsmilesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DotContext dot() {
		DotContext _localctx = new DotContext(Context, State);
		EnterRule(_localctx, 12, RULE_dot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IsotopeContext isotope() {
			return GetRuleContext<IsotopeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChiralContext chiral() {
			return GetRuleContext<ChiralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HcountContext hcount() {
			return GetRuleContext<HcountContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChargeContext charge() {
			return GetRuleContext<ChargeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomclassContext atomclass() {
			return GetRuleContext<AtomclassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrganicContext organic() {
			return GetRuleContext<OrganicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AromaticContext aromatic() {
			return GetRuleContext<AromaticContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsmilesVisitor<TResult> typedVisitor = visitor as IsmilesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 14, RULE_atom);
		int _la;
		try {
			State = 134;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 113;
				Match(T__11);
				State = 115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DIGIT) {
					{
					State = 114;
					isotope();
					}
				}

				State = 117;
				symbol();
				State = 119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48))) != 0)) {
					{
					State = 118;
					chiral();
					}
				}

				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__52) {
					{
					State = 121;
					hcount();
					}
				}

				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__49) | (1L << T__50) | (1L << T__51))) != 0)) {
					{
					State = 124;
					charge();
					}
				}

				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__7) {
					{
					State = 127;
					atomclass();
					}
				}

				State = 130;
				Match(T__12);
				}
				}
				break;
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
				EnterOuterAlt(_localctx, 2);
				{
				State = 132;
				organic();
				}
				break;
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
				EnterOuterAlt(_localctx, 3);
				{
				State = 133;
				aromatic();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element() {
			return GetRuleContext<ElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WILDCARD() { return GetToken(smilesParser.WILDCARD, 0); }
		public SymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.EnterSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.ExitSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsmilesVisitor<TResult> typedVisitor = visitor as IsmilesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolContext symbol() {
		SymbolContext _localctx = new SymbolContext(Context, State);
		EnterRule(_localctx, 16, RULE_symbol);
		try {
			State = 138;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case T__64:
			case T__65:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case T__78:
			case T__79:
			case T__80:
			case T__81:
			case T__82:
			case T__83:
			case T__84:
			case T__85:
			case T__86:
			case T__87:
			case T__88:
			case T__89:
			case T__90:
			case T__91:
			case T__92:
			case T__93:
			case T__94:
			case T__95:
			case T__96:
			case T__97:
			case T__98:
			case T__99:
			case T__100:
			case T__101:
			case T__102:
			case T__103:
			case T__104:
			case T__105:
			case T__106:
			case T__107:
			case T__108:
			case T__109:
			case T__110:
			case T__111:
			case T__112:
			case T__113:
			case T__114:
			case T__115:
			case T__116:
			case T__117:
			case T__118:
			case T__119:
			case T__120:
			case T__121:
			case T__122:
			case T__123:
			case T__124:
			case T__125:
			case T__126:
			case T__127:
			case T__128:
			case T__129:
			case T__130:
			case T__131:
			case T__132:
			case T__133:
			case T__134:
			case T__135:
			case T__136:
			case T__137:
			case T__138:
			case T__139:
			case T__140:
			case T__141:
			case T__142:
			case T__143:
			case T__144:
			case T__145:
			case T__146:
			case T__147:
			case T__148:
			case T__149:
			case T__150:
			case T__151:
			case T__152:
			case T__153:
			case T__154:
			case T__155:
				EnterOuterAlt(_localctx, 1);
				{
				State = 136;
				element();
				}
				break;
			case WILDCARD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 137;
				Match(WILDCARD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrganicContext : ParserRuleContext {
		public OrganicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_organic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.EnterOrganic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.ExitOrganic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsmilesVisitor<TResult> typedVisitor = visitor as IsmilesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrganic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrganicContext organic() {
		OrganicContext _localctx = new OrganicContext(Context, State);
		EnterRule(_localctx, 18, RULE_organic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AromaticContext : ParserRuleContext {
		public AromaticContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aromatic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.EnterAromatic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.ExitAromatic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsmilesVisitor<TResult> typedVisitor = visitor as IsmilesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAromatic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AromaticContext aromatic() {
		AromaticContext _localctx = new AromaticContext(Context, State);
		EnterRule(_localctx, 20, RULE_aromatic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HalogenContext : ParserRuleContext {
		public HalogenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_halogen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.EnterHalogen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.ExitHalogen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsmilesVisitor<TResult> typedVisitor = visitor as IsmilesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHalogen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HalogenContext halogen() {
		HalogenContext _localctx = new HalogenContext(Context, State);
		EnterRule(_localctx, 22, RULE_halogen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			Match(T__31);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChiralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT() { return GetToken(smilesParser.DIGIT, 0); }
		public ChiralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chiral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.EnterChiral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.ExitChiral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsmilesVisitor<TResult> typedVisitor = visitor as IsmilesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChiral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChiralContext chiral() {
		ChiralContext _localctx = new ChiralContext(Context, State);
		EnterRule(_localctx, 24, RULE_chiral);
		int _la;
		try {
			State = 175;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__32:
				EnterOuterAlt(_localctx, 1);
				{
				State = 146;
				Match(T__32);
				}
				break;
			case T__33:
				EnterOuterAlt(_localctx, 2);
				{
				State = 147;
				Match(T__33);
				}
				break;
			case T__34:
				EnterOuterAlt(_localctx, 3);
				{
				State = 148;
				Match(T__34);
				}
				break;
			case T__35:
				EnterOuterAlt(_localctx, 4);
				{
				State = 149;
				Match(T__35);
				}
				break;
			case T__36:
				EnterOuterAlt(_localctx, 5);
				{
				State = 150;
				Match(T__36);
				}
				break;
			case T__37:
				EnterOuterAlt(_localctx, 6);
				{
				State = 151;
				Match(T__37);
				}
				break;
			case T__38:
				EnterOuterAlt(_localctx, 7);
				{
				State = 152;
				Match(T__38);
				}
				break;
			case T__39:
				EnterOuterAlt(_localctx, 8);
				{
				State = 153;
				Match(T__39);
				}
				break;
			case T__40:
				EnterOuterAlt(_localctx, 9);
				{
				State = 154;
				Match(T__40);
				}
				break;
			case T__41:
				EnterOuterAlt(_localctx, 10);
				{
				{
				State = 155;
				Match(T__41);
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DIGIT) {
					{
					State = 156;
					Match(DIGIT);
					}
				}

				}
				}
				break;
			case T__42:
				EnterOuterAlt(_localctx, 11);
				{
				{
				State = 159;
				Match(T__42);
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DIGIT) {
					{
					State = 160;
					Match(DIGIT);
					}
				}

				}
				}
				break;
			case T__43:
				EnterOuterAlt(_localctx, 12);
				{
				State = 163;
				Match(T__43);
				}
				break;
			case T__44:
				EnterOuterAlt(_localctx, 13);
				{
				State = 164;
				Match(T__44);
				}
				break;
			case T__45:
				EnterOuterAlt(_localctx, 14);
				{
				{
				State = 165;
				Match(T__45);
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DIGIT) {
					{
					State = 166;
					Match(DIGIT);
					}
				}

				}
				}
				break;
			case T__46:
				EnterOuterAlt(_localctx, 15);
				{
				{
				State = 169;
				Match(T__46);
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DIGIT) {
					{
					State = 170;
					Match(DIGIT);
					}
				}

				}
				}
				break;
			case T__47:
				EnterOuterAlt(_localctx, 16);
				{
				State = 173;
				Match(T__47);
				}
				break;
			case T__48:
				EnterOuterAlt(_localctx, 17);
				{
				State = 174;
				Match(T__48);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChargeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(smilesParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(smilesParser.DIGIT, i);
		}
		public ChargeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charge; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.EnterCharge(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.ExitCharge(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsmilesVisitor<TResult> typedVisitor = visitor as IsmilesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharge(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChargeContext charge() {
		ChargeContext _localctx = new ChargeContext(Context, State);
		EnterRule(_localctx, 26, RULE_charge);
		try {
			State = 191;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 177;
				Match(T__3);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 178;
				Match(T__3);
				State = 180;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 179;
					Match(DIGIT);
					}
					break;
				}
				State = 182;
				Match(DIGIT);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 183;
				Match(T__49);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 184;
				Match(T__49);
				State = 186;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 185;
					Match(DIGIT);
					}
					break;
				}
				State = 188;
				Match(DIGIT);
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 189;
				Match(T__50);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 190;
				Match(T__51);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HcountContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT() { return GetToken(smilesParser.DIGIT, 0); }
		public HcountContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hcount; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.EnterHcount(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.ExitHcount(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsmilesVisitor<TResult> typedVisitor = visitor as IsmilesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHcount(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HcountContext hcount() {
		HcountContext _localctx = new HcountContext(Context, State);
		EnterRule(_localctx, 28, RULE_hcount);
		try {
			State = 196;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 193;
				Match(T__52);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 194;
				Match(T__52);
				State = 195;
				Match(DIGIT);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomclassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(smilesParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(smilesParser.DIGIT, i);
		}
		public AtomclassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomclass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.EnterAtomclass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.ExitAtomclass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsmilesVisitor<TResult> typedVisitor = visitor as IsmilesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomclass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomclassContext atomclass() {
		AtomclassContext _localctx = new AtomclassContext(Context, State);
		EnterRule(_localctx, 30, RULE_atomclass);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			Match(T__7);
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 199;
				Match(DIGIT);
				}
				}
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DIGIT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsotopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(smilesParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(smilesParser.DIGIT, i);
		}
		public IsotopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isotope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.EnterIsotope(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.ExitIsotope(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsmilesVisitor<TResult> typedVisitor = visitor as IsmilesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsotope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsotopeContext isotope() {
		IsotopeContext _localctx = new IsotopeContext(Context, State);
		EnterRule(_localctx, 32, RULE_isotope);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			Match(DIGIT);
			State = 206;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 205;
				Match(DIGIT);
				}
				break;
			}
			State = 209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DIGIT) {
				{
				State = 208;
				Match(DIGIT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsmilesVisitor<TResult> typedVisitor = visitor as IsmilesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 34, RULE_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__66 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__82 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__100 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__106 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__111 - 64)) | (1L << (T__112 - 64)) | (1L << (T__113 - 64)) | (1L << (T__114 - 64)) | (1L << (T__115 - 64)) | (1L << (T__116 - 64)) | (1L << (T__117 - 64)) | (1L << (T__118 - 64)) | (1L << (T__119 - 64)) | (1L << (T__120 - 64)) | (1L << (T__121 - 64)) | (1L << (T__122 - 64)) | (1L << (T__123 - 64)) | (1L << (T__124 - 64)) | (1L << (T__125 - 64)) | (1L << (T__126 - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (T__127 - 128)) | (1L << (T__128 - 128)) | (1L << (T__129 - 128)) | (1L << (T__130 - 128)) | (1L << (T__131 - 128)) | (1L << (T__132 - 128)) | (1L << (T__133 - 128)) | (1L << (T__134 - 128)) | (1L << (T__135 - 128)) | (1L << (T__136 - 128)) | (1L << (T__137 - 128)) | (1L << (T__138 - 128)) | (1L << (T__139 - 128)) | (1L << (T__140 - 128)) | (1L << (T__141 - 128)) | (1L << (T__142 - 128)) | (1L << (T__143 - 128)) | (1L << (T__144 - 128)) | (1L << (T__145 - 128)) | (1L << (T__146 - 128)) | (1L << (T__147 - 128)) | (1L << (T__148 - 128)) | (1L << (T__149 - 128)) | (1L << (T__150 - 128)) | (1L << (T__151 - 128)) | (1L << (T__152 - 128)) | (1L << (T__153 - 128)) | (1L << (T__154 - 128)) | (1L << (T__155 - 128)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return chain_sempred((ChainContext)_localctx, predIndex);
		}
		return true;
	}
	private bool chain_sempred(ChainContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		case 2: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,160,214,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,1,0,3,0,38,8,0,1,0,1,0,1,0,1,0,1,0,3,0,45,
		8,0,1,0,3,0,48,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		5,1,63,8,1,10,1,12,1,66,9,1,1,2,1,2,3,2,70,8,2,1,2,5,2,73,8,2,10,2,12,
		2,76,9,2,1,2,5,2,79,8,2,10,2,12,2,82,9,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,102,8,3,1,4,1,4,1,4,1,4,
		3,4,108,8,4,1,5,1,5,1,6,1,6,1,7,1,7,3,7,116,8,7,1,7,1,7,3,7,120,8,7,1,
		7,3,7,123,8,7,1,7,3,7,126,8,7,1,7,3,7,129,8,7,1,7,1,7,1,7,1,7,3,7,135,
		8,7,1,8,1,8,3,8,139,8,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,158,8,12,1,12,1,12,3,12,162,8,
		12,1,12,1,12,1,12,1,12,3,12,168,8,12,1,12,1,12,3,12,172,8,12,1,12,1,12,
		3,12,176,8,12,1,13,1,13,1,13,3,13,181,8,13,1,13,1,13,1,13,1,13,3,13,187,
		8,13,1,13,1,13,1,13,3,13,192,8,13,1,14,1,14,1,14,3,14,197,8,14,1,15,1,
		15,4,15,201,8,15,11,15,12,15,202,1,16,1,16,3,16,207,8,16,1,16,3,16,210,
		8,16,1,17,1,17,1,17,0,1,2,18,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,
		32,34,0,4,1,0,4,10,1,0,14,23,1,0,24,31,2,0,14,23,53,156,247,0,47,1,0,0,
		0,2,49,1,0,0,0,4,67,1,0,0,0,6,101,1,0,0,0,8,107,1,0,0,0,10,109,1,0,0,0,
		12,111,1,0,0,0,14,134,1,0,0,0,16,138,1,0,0,0,18,140,1,0,0,0,20,142,1,0,
		0,0,22,144,1,0,0,0,24,175,1,0,0,0,26,191,1,0,0,0,28,196,1,0,0,0,30,198,
		1,0,0,0,32,204,1,0,0,0,34,211,1,0,0,0,36,38,3,2,1,0,37,36,1,0,0,0,37,38,
		1,0,0,0,38,39,1,0,0,0,39,48,5,0,0,1,40,41,5,1,0,0,41,42,3,2,1,0,42,43,
		5,2,0,0,43,45,1,0,0,0,44,40,1,0,0,0,44,45,1,0,0,0,45,46,1,0,0,0,46,48,
		5,0,0,1,47,37,1,0,0,0,47,44,1,0,0,0,48,1,1,0,0,0,49,50,6,1,-1,0,50,51,
		3,4,2,0,51,64,1,0,0,0,52,53,10,3,0,0,53,63,3,4,2,0,54,55,10,2,0,0,55,56,
		3,10,5,0,56,57,3,4,2,0,57,63,1,0,0,0,58,59,10,1,0,0,59,60,3,12,6,0,60,
		61,3,4,2,0,61,63,1,0,0,0,62,52,1,0,0,0,62,54,1,0,0,0,62,58,1,0,0,0,63,
		66,1,0,0,0,64,62,1,0,0,0,64,65,1,0,0,0,65,3,1,0,0,0,66,64,1,0,0,0,67,74,
		3,14,7,0,68,70,3,10,5,0,69,68,1,0,0,0,69,70,1,0,0,0,70,71,1,0,0,0,71,73,
		3,8,4,0,72,69,1,0,0,0,73,76,1,0,0,0,74,72,1,0,0,0,74,75,1,0,0,0,75,80,
		1,0,0,0,76,74,1,0,0,0,77,79,3,6,3,0,78,77,1,0,0,0,79,82,1,0,0,0,80,78,
		1,0,0,0,80,81,1,0,0,0,81,5,1,0,0,0,82,80,1,0,0,0,83,84,5,1,0,0,84,85,3,
		2,1,0,85,86,5,2,0,0,86,102,1,0,0,0,87,88,5,1,0,0,88,89,3,10,5,0,89,90,
		3,2,1,0,90,91,5,2,0,0,91,102,1,0,0,0,92,93,5,1,0,0,93,94,3,12,6,0,94,95,
		3,2,1,0,95,96,5,2,0,0,96,102,1,0,0,0,97,98,5,1,0,0,98,99,3,6,3,0,99,100,
		5,2,0,0,100,102,1,0,0,0,101,83,1,0,0,0,101,87,1,0,0,0,101,92,1,0,0,0,101,
		97,1,0,0,0,102,7,1,0,0,0,103,104,5,3,0,0,104,105,5,160,0,0,105,108,5,160,
		0,0,106,108,5,160,0,0,107,103,1,0,0,0,107,106,1,0,0,0,108,9,1,0,0,0,109,
		110,7,0,0,0,110,11,1,0,0,0,111,112,5,11,0,0,112,13,1,0,0,0,113,115,5,12,
		0,0,114,116,3,32,16,0,115,114,1,0,0,0,115,116,1,0,0,0,116,117,1,0,0,0,
		117,119,3,16,8,0,118,120,3,24,12,0,119,118,1,0,0,0,119,120,1,0,0,0,120,
		122,1,0,0,0,121,123,3,28,14,0,122,121,1,0,0,0,122,123,1,0,0,0,123,125,
		1,0,0,0,124,126,3,26,13,0,125,124,1,0,0,0,125,126,1,0,0,0,126,128,1,0,
		0,0,127,129,3,30,15,0,128,127,1,0,0,0,128,129,1,0,0,0,129,130,1,0,0,0,
		130,131,5,13,0,0,131,135,1,0,0,0,132,135,3,18,9,0,133,135,3,20,10,0,134,
		113,1,0,0,0,134,132,1,0,0,0,134,133,1,0,0,0,135,15,1,0,0,0,136,139,3,34,
		17,0,137,139,5,159,0,0,138,136,1,0,0,0,138,137,1,0,0,0,139,17,1,0,0,0,
		140,141,7,1,0,0,141,19,1,0,0,0,142,143,7,2,0,0,143,21,1,0,0,0,144,145,
		5,32,0,0,145,23,1,0,0,0,146,176,5,33,0,0,147,176,5,34,0,0,148,176,5,35,
		0,0,149,176,5,36,0,0,150,176,5,37,0,0,151,176,5,38,0,0,152,176,5,39,0,
		0,153,176,5,40,0,0,154,176,5,41,0,0,155,157,5,42,0,0,156,158,5,160,0,0,
		157,156,1,0,0,0,157,158,1,0,0,0,158,176,1,0,0,0,159,161,5,43,0,0,160,162,
		5,160,0,0,161,160,1,0,0,0,161,162,1,0,0,0,162,176,1,0,0,0,163,176,5,44,
		0,0,164,176,5,45,0,0,165,167,5,46,0,0,166,168,5,160,0,0,167,166,1,0,0,
		0,167,168,1,0,0,0,168,176,1,0,0,0,169,171,5,47,0,0,170,172,5,160,0,0,171,
		170,1,0,0,0,171,172,1,0,0,0,172,176,1,0,0,0,173,176,5,48,0,0,174,176,5,
		49,0,0,175,146,1,0,0,0,175,147,1,0,0,0,175,148,1,0,0,0,175,149,1,0,0,0,
		175,150,1,0,0,0,175,151,1,0,0,0,175,152,1,0,0,0,175,153,1,0,0,0,175,154,
		1,0,0,0,175,155,1,0,0,0,175,159,1,0,0,0,175,163,1,0,0,0,175,164,1,0,0,
		0,175,165,1,0,0,0,175,169,1,0,0,0,175,173,1,0,0,0,175,174,1,0,0,0,176,
		25,1,0,0,0,177,192,5,4,0,0,178,180,5,4,0,0,179,181,5,160,0,0,180,179,1,
		0,0,0,180,181,1,0,0,0,181,182,1,0,0,0,182,192,5,160,0,0,183,192,5,50,0,
		0,184,186,5,50,0,0,185,187,5,160,0,0,186,185,1,0,0,0,186,187,1,0,0,0,187,
		188,1,0,0,0,188,192,5,160,0,0,189,192,5,51,0,0,190,192,5,52,0,0,191,177,
		1,0,0,0,191,178,1,0,0,0,191,183,1,0,0,0,191,184,1,0,0,0,191,189,1,0,0,
		0,191,190,1,0,0,0,192,27,1,0,0,0,193,197,5,53,0,0,194,195,5,53,0,0,195,
		197,5,160,0,0,196,193,1,0,0,0,196,194,1,0,0,0,197,29,1,0,0,0,198,200,5,
		8,0,0,199,201,5,160,0,0,200,199,1,0,0,0,201,202,1,0,0,0,202,200,1,0,0,
		0,202,203,1,0,0,0,203,31,1,0,0,0,204,206,5,160,0,0,205,207,5,160,0,0,206,
		205,1,0,0,0,206,207,1,0,0,0,207,209,1,0,0,0,208,210,5,160,0,0,209,208,
		1,0,0,0,209,210,1,0,0,0,210,33,1,0,0,0,211,212,7,3,0,0,212,35,1,0,0,0,
		29,37,44,47,62,64,69,74,80,101,107,115,119,122,125,128,134,138,157,161,
		167,171,175,180,186,191,196,202,206,209
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
